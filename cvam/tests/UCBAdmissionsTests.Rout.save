
R version 3.5.2 (2018-12-20) -- "Eggshell Igloo"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###########################################################################
> # Unit tests using the UCBAdmissions data
> ###########################################################################
> library(cvam)
> dF <- microUCBAdmissions  # to save typing
> # this reproduces the 3-way table UCBAdmissions
> result <- table( Admit = dF$Admit, 
+    Gender = dF$Gender, Dept = dF$Dept )
> str(result)
 'table' int [1:2, 1:2, 1:6] 512 313 89 19 353 207 17 8 120 205 ...
 - attr(*, "dimnames")=List of 3
  ..$ Admit : chr [1:2] "Admitted" "Rejected"
  ..$ Gender: chr [1:2] "Male" "Female"
  ..$ Dept  : chr [1:6] "A" "B" "C" "D" ...
> print( all.equal( result, UCBAdmissions ) )
[1] TRUE
> 
> # do the same thing with xtabs, which accepts formula notation
> result <- xtabs( ~ Admit + Gender + Dept, data=microUCBAdmissions )
> print( all( result==UCBAdmissions ) )
[1] TRUE
> 
> # create a Freq variable and fill it with ones
> microUCBAdmissions$Freq <- 1
> # use aggregate to sum the Freq variable within categories of
> # Admit, Gender, and Dept
> result <- aggregate( Freq ~ Admit + Gender + Dept,
+    data=microUCBAdmissions, FUN=sum )
> print( head(result) )
     Admit Gender Dept Freq
1 Admitted   Male    A  512
2 Rejected   Male    A  313
3 Admitted Female    A   89
4 Rejected Female    A   19
5 Admitted   Male    B  353
6 Rejected   Male    B  207
> 
> 
> # fit with glm
> dF <- as.data.frame(UCBAdmissions)
> M0 <- glm( Freq ~ Dept*Gender + Dept*Admit, family=poisson(), data=dF )
> M1 <- glm( Freq ~ Dept*Gender + Dept*Admit + Gender*Admit,
+    family=poisson(), data=dF )
> M2 <- glm( Freq ~ Dept*Gender*Admit, family=poisson(), data=dF )
> dF$muHat0 <- predict(M0, type="response")
> dF$muHat1 <- predict(M1, type="response")
> dF$muHat2 <- predict(M2, type="response")
> fit0 <- xtabs( muHat0 ~ Admit + Gender + Dept, data=dF )
> fit1 <- xtabs( muHat1 ~ Admit + Gender + Dept, data=dF )
> fit2 <- xtabs( muHat2 ~ Admit + Gender + Dept, data=dF )
> # under M0, the fitted conditional OR's should be 1.0:
> print( fit0[1,1,] * fit0[2,2,] / ( fit0[1,2,] * fit0[2,1,] ) )
A B C D E F 
1 1 1 1 1 1 
> # under M1, the fitted conditional OR's should be equal:
> print( fit1[1,1,] * fit1[2,2,] / ( fit1[1,2,] * fit1[2,1,] ) )
       A        B        C        D        E        F 
0.904955 0.904955 0.904955 0.904955 0.904955 0.904955 
> # under M2, the fitted conditional OR's should vary, and they
> # should agree with corresponding OR's based on the observed
> # frequencies, because M2 is saturated:
> print( fit2[1,1,] * fit2[2,2,] / ( fit2[1,2,] * fit2[2,1,] ) )
        A         B         C         D         E         F 
0.3492120 0.8025007 1.1330596 0.9212838 1.2216312 0.8278727 
> print( anova(M0,M1,M2) )
Analysis of Deviance Table

Model 1: Freq ~ Dept * Gender + Dept * Admit
Model 2: Freq ~ Dept * Gender + Dept * Admit + Gender * Admit
Model 3: Freq ~ Dept * Gender * Admit
  Resid. Df Resid. Dev Df Deviance
1         6     21.735            
2         5     20.204  1   1.5312
3         0      0.000  5  20.2043
> d01 <- deviance(M0)-deviance(M1)
> d12 <- deviance(M1)-deviance(M2)
> d02 <- deviance(M0)-deviance(M2)
> # make a list of 6 data frames, one per department
> list2x2 <- as.list(1:6)
> for( j in 1:6 ) list2x2[[j]] <- subset(dF, Dept==levels(dF$Dept)[j]  )
> # function for computing deviance for LR test of independence
> # within a department
> myFunc <- function( dF ) {
+    M <- glm( Freq ~ Gender + Admit, family=poisson(), data=dF )
+    deviance(M)
+ }
> # apply LR test to each department, returning a vector of deviances
> dev <- sapply( list2x2, myFunc )
> print( dev )
[1] 19.0540099  0.2586429  0.7509844  0.2978665  0.9903864  0.3836167
> print( sum(dev) )
[1] 21.73551
> # should be same
> print( anova(M0,M2) )
Analysis of Deviance Table

Model 1: Freq ~ Dept * Gender + Dept * Admit
Model 2: Freq ~ Dept * Gender * Admit
  Resid. Df Resid. Dev Df Deviance
1         6     21.735            
2         0      0.000  6   21.735
> 
> # run same models in cvam
> dF <- as.data.frame(UCBAdmissions)
> M0 <- cvam( ~ Dept*Gender + Dept*Admit, data=dF, freq=Freq )
> M1 <- cvam( ~ Dept*Gender + Dept*Admit + Gender*Admit, data=dF, freq=Freq )
> M2 <- cvam( ~ Dept*Gender*Admit, data=dF, freq=Freq )
> anova(M0,M1,M2)
Model 1: ~ Dept * Gender + Dept * Admit
Model 2: ~ Dept * Gender + Dept * Admit + Gender * Admit
Model 3: ~ Dept * Gender * Admit
  resid.df -2*loglik df  change
1        6    -41005           
2        5    -41006  1  1.5312
3        0    -41026  5 20.2043
> print( get.coef(M0, withSE=TRUE) )
                      coef         SE  tstat   pval
(Intercept)    4.805669565 0.02598938 184.91 0.0000
Dept1          0.156547492 0.04985439   3.14 0.0017
Dept2         -0.761804591 0.08789640  -8.67 0.0000
Dept3          0.539038941 0.03924728  13.73 0.0000
Dept4          0.426921589 0.04020043  10.62 0.0000
Dept5         -0.027346137 0.04843304  -0.56 0.5723
Gender1        0.334605321 0.02289450  14.62 0.0000
Admit1        -0.325781804 0.01950248 -16.70 0.0000
Dept1:Gender1  0.682020758 0.04763810  14.32 0.0000
Dept2:Gender1  1.219925158 0.08653579  14.10 0.0000
Dept3:Gender1 -0.635289930 0.03630476 -17.50 0.0000
Dept4:Gender1 -0.281525223 0.03699031  -7.61 0.0000
Dept5:Gender1 -0.695373413 0.04267138 -16.30 0.0000
Dept1:Admit1   0.622511787 0.03405394  18.28 0.0000
Dept2:Admit1   0.597214293 0.04007482  14.90 0.0000
Dept3:Admit1   0.017937243 0.03431599   0.52 0.6012
Dept4:Admit1  -0.006653238 0.03631253  -0.18 0.8546
Dept5:Admit1  -0.218968500 0.04353759  -5.03 0.0000
> print( head( get.fitted(M0, type="mean" ) ) )
  Dept Gender    Admit freq       fit
1    A   Male Admitted  512 531.43087
2    B   Male Admitted  353 354.18803
3    C   Male Admitted  120 113.99782
4    D   Male Admitted  138 141.63258
5    E   Male Admitted   53  48.07705
6    F   Male Admitted   22  24.03081
> 
> # refit M0 with microdata to see that results are the same
> M0 <- cvam( ~ Dept*Gender + Dept*Admit, data=microUCBAdmissions )
> print( get.coef(M0, withSE=TRUE) )
                      coef         SE  tstat   pval
(Intercept)    4.805669565 0.02598938 184.91 0.0000
Dept1          0.156547492 0.04985439   3.14 0.0017
Dept2         -0.761804591 0.08789640  -8.67 0.0000
Dept3          0.539038941 0.03924728  13.73 0.0000
Dept4          0.426921589 0.04020043  10.62 0.0000
Dept5         -0.027346137 0.04843304  -0.56 0.5723
Gender1        0.334605321 0.02289450  14.62 0.0000
Admit1        -0.325781804 0.01950248 -16.70 0.0000
Dept1:Gender1  0.682020758 0.04763810  14.32 0.0000
Dept2:Gender1  1.219925158 0.08653579  14.10 0.0000
Dept3:Gender1 -0.635289930 0.03630476 -17.50 0.0000
Dept4:Gender1 -0.281525223 0.03699031  -7.61 0.0000
Dept5:Gender1 -0.695373413 0.04267138 -16.30 0.0000
Dept1:Admit1   0.622511787 0.03405394  18.28 0.0000
Dept2:Admit1   0.597214293 0.04007482  14.90 0.0000
Dept3:Admit1   0.017937243 0.03431599   0.52 0.6012
Dept4:Admit1  -0.006653238 0.03631253  -0.18 0.8546
Dept5:Admit1  -0.218968500 0.04353759  -5.03 0.0000
> 
> # compute the deviance for model M0
> M0 <- cvam( ~ Dept*Gender + Dept*Admit, data=dF, freq=Freq )
> M2 <- cvam( ~ Dept*Gender*Admit, data=dF, freq=Freq, saturated=TRUE )
> dev.M0 <- -2 * ( get.loglik(M0) - get.loglik(M2) )
> print( dev.M0 )
[1] 21.73551
> 
> # fit M1 as a conditional model
> M1 <- cvam( ~ Dept*Gender + Dept*Admit + Gender*Admit | Dept + Gender,
+    data=dF, freq=Freq )
> print( head( get.fitted(M1, type="prob") ) )
     Admit Dept Gender freq       fit
1 Admitted    A   Male  512 0.6415393
2 Rejected    A   Male  313 0.3584607
3 Admitted    B   Male  353 0.6314991
4 Rejected    B   Male  207 0.3685009
5 Admitted    C   Male  120 0.3361393
6 Rejected    C   Male  205 0.6638607
> 
> proc.time()
   user  system elapsed 
  0.300   0.063   0.361 
